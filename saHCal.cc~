
#include <iostream>
#include <pmonitor/pmonitor.h>
#include "saHCal.h"

#include <TH1.h>
#include <TH2.h>
#include <TF1.h>
#include <TMath.h>
#include <iostream>
#include <string>
#include <fstream>
#include <sstream> 


int init_done = 0;
int fit_init_done = 0;

using namespace std;


int threshold = 0;

double getSignal(Packet *p, const int channel)
{
  double baseline = 0;
  for ( int s = 0;  s< 3; s++) {
      baseline += p->iValue(s,channel);
    }
  baseline /= 3.;

  double signal = 0;
  float x = 0;
  for ( int s = 3;  s< p->iValue(0,"SAMPLES"); s++) {
      x++;
      signal += p->iValue(s,channel) - baseline;
    }
  signal /= x;

  return signal;
}


//return the index of the vertical tower
int vertidx(int idx){
  if(idx % 2  == 0) return idx + 1;

  if(idx % 2 == 1) return idx - 1;

  return -999;
}


int pinit()
{
  cout << "initiallizing" <<endl;
  return 0;
}

// this runs for every event
int process_event (Event * e)
{

  if ( e->getEvtType() == 9)
    {
      return 0;
    }

  int returnval = 0;

  // data is ordered into packets, like looping over sectors
  for (int packet=8001; packet<8033; packet++) {

  Packet *p = e->getPacket(packet);
  if (p)
    {
      for ( int c = 0; c < 48; c++)
	{
          double signal = getSignal(p,c);
	  cout << "c: " << c << " p: " << p <<endl;    

	} // channels
      delete p;

    } // if p
    } // packet loop
  
  return returnval;
}

int pclose()
{
  // this is where you should cout your averages and other quantities
  cout << "writing variables" <<endl;
  return 0;
}

